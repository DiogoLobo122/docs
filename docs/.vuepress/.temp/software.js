export const usePages = () => [{"key":"v-568d1ef9","path":"/05-Software/","title":"Software","lang":"ko-KR","frontmatter":{"tag":["Software"],"headerDepth":0,"description":"Software Recent pages {{ page.title }} [ {{ (new Date(page.frontmatter.date)).toLocaleString() }} ]","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/05-Software/"}],["meta",{"property":"og:site_name","content":"docmoa"}],["meta",{"property":"og:title","content":"Software"}],["meta",{"property":"og:description","content":"Software Recent pages {{ page.title }} [ {{ (new Date(page.frontmatter.date)).toLocaleString() }} ]"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"Software"}],["script",{"type":"application/ld+json"},"{\"@context\":\"https://schema.org\",\"@type\":\"Article\",\"headline\":\"Software\",\"image\":[\"\"],\"dateModified\":null,\"author\":[]}"]]},"headers":[{"level":2,"title":"Recent pages","slug":"recent-pages","link":"#recent-pages","children":[]},{"level":2,"title":"Jenkins","slug":"jenkins","link":"#jenkins","children":[]},{"level":2,"title":"Tomcat","slug":"tomcat","link":"#tomcat","children":[]}],"git":{},"readingTime":{"minutes":0.21,"words":62},"filePathRelative":"05-Software/README.md","excerpt":"<h1> Software</h1>\n<h2> Recent pages</h2>\n<ul>\n  <li v-for=\"page in pages\" :key=\"page.key\">\n    <a :to=\"page.path\" href=\"undefined\" target=\"blank\">{{ page.title }}</a>\n    <span v-if=\"page.frontmatter.date\">\n      [ {{ (new Date(page.frontmatter.date)).toLocaleString() }} ]\n    </span>\n  </li>\n</ul>","copyright":{"license":"CC BY-NC-ND 4.0 Licensed | ⓒ 2021-present docmoa™ contributers all rights reserved."},"autoDesc":true},{"key":"v-65f5313a","path":"/05-Software/Jenkins/pipeline101/00-introduction.html","title":"Pipeline on Jenkins 101 : Introduction","lang":"ko-KR","frontmatter":{"description":"jenkins 101","tag":["cicd","jenkins"],"head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/05-Software/Jenkins/pipeline101/00-introduction.html"}],["meta",{"property":"og:site_name","content":"docmoa"}],["meta",{"property":"og:title","content":"Pipeline on Jenkins 101 : Introduction"}],["meta",{"property":"og:description","content":"jenkins 101"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"cicd"}],["meta",{"property":"article:tag","content":"jenkins"}],["script",{"type":"application/ld+json"},"{\"@context\":\"https://schema.org\",\"@type\":\"Article\",\"headline\":\"Pipeline on Jenkins 101 : Introduction\",\"image\":[\"\"],\"dateModified\":null,\"author\":[]}"]]},"headers":[{"level":2,"title":"Jenkins 실행 및 구성","slug":"jenkins-실행-및-구성","link":"#jenkins-실행-및-구성","children":[]},{"level":2,"title":"GitHub 계정생성","slug":"github-계정생성","link":"#github-계정생성","children":[]},{"level":2,"title":"Jenkins Theme (Optional)","slug":"jenkins-theme-optional","link":"#jenkins-theme-optional","children":[]}],"git":{},"readingTime":{"minutes":0.96,"words":287},"filePathRelative":"05-Software/Jenkins/pipeline101/00-introduction.md","excerpt":"<h1> Pipeline on Jenkins 101 : Introduction</h1>\n<blockquote>\n<p>Update at 31 Jul, 2019</p>\n</blockquote>\n<p>Jenkins Pipeline 을 구성하기 위해 VM 환경에서 Jenkins와 관련 Echo System을 구성합니다. 각 Product의 버전은 문서를 작성하는 시점에서의 최신 버전을 위주로 다운로드 및 설치되었습니다. 구성 기반 환경 및 버전은 필요에 따라 변경 가능합니다.</p>\n<table>\n<thead>\n<tr>\n<th>Category</th>\n<th>Name</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>VM</td>\n<td>VirtualBox</td>\n<td>6.0.10</td>\n</tr>\n<tr>\n<td>OS</td>\n<td>Red Hat Enterprise Linux</td>\n<td>8.0.0</td>\n</tr>\n<tr>\n<td>JDK</td>\n<td>Red Hat OpenJDK</td>\n<td>1.8.222</td>\n</tr>\n<tr>\n<td>Jenkins</td>\n<td>Jenkins rpm</td>\n<td>2.176.2</td>\n</tr>\n</tbody>\n</table>","copyright":{"license":"CC BY-NC-ND 4.0 Licensed | ⓒ 2021-present docmoa™ contributers all rights reserved."}},{"key":"v-1e5ff317","path":"/05-Software/Jenkins/pipeline101/01-cicd.html","title":"1. CI/CD","lang":"ko-KR","frontmatter":{"description":"jenkins 101","tag":["cicd","jenkins"],"head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/05-Software/Jenkins/pipeline101/01-cicd.html"}],["meta",{"property":"og:site_name","content":"docmoa"}],["meta",{"property":"og:title","content":"1. CI/CD"}],["meta",{"property":"og:description","content":"jenkins 101"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"cicd"}],["meta",{"property":"article:tag","content":"jenkins"}],["script",{"type":"application/ld+json"},"{\"@context\":\"https://schema.org\",\"@type\":\"Article\",\"headline\":\"1. CI/CD\",\"image\":[\"\"],\"dateModified\":null,\"author\":[]}"]]},"headers":[{"level":2,"title":"1.1 CI/CD Concept Definitions","slug":"_1-1-ci-cd-concept-definitions","link":"#_1-1-ci-cd-concept-definitions","children":[]},{"level":2,"title":"1.2 Delivery vs Deployment","slug":"_1-2-delivery-vs-deployment","link":"#_1-2-delivery-vs-deployment","children":[]},{"level":2,"title":"1.3 Jenkins for CI/CD","slug":"_1-3-jenkins-for-ci-cd","link":"#_1-3-jenkins-for-ci-cd","children":[]}],"git":{},"readingTime":{"minutes":0.23,"words":70},"filePathRelative":"05-Software/Jenkins/pipeline101/01-cicd.md","excerpt":"<h1> 1. CI/CD</h1>\n<h2> 1.1 CI/CD Concept Definitions</h2>\n<ul>\n<li>Continuous integration</li>\n<li>Continuous delivery</li>\n<li>Continuous deployment</li>\n<li>Source control management (SCM)</li>\n</ul>\n<h2> 1.2 Delivery vs Deployment</h2>\n<ul>\n<li>Continuous Delivery requires user intervention\n<ul>\n<li>When? : Stage to Production</li>\n</ul>\n</li>\n</ul>","copyright":{"license":"CC BY-NC-ND 4.0 Licensed | ⓒ 2021-present docmoa™ contributers all rights reserved."}},{"key":"v-151d3229","path":"/05-Software/Jenkins/pipeline101/02-jobs.html","title":"2. Jobs","lang":"ko-KR","frontmatter":{"description":"jenkins 101","tag":["cicd","jenkins"],"head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/05-Software/Jenkins/pipeline101/02-jobs.html"}],["meta",{"property":"og:site_name","content":"docmoa"}],["meta",{"property":"og:title","content":"2. Jobs"}],["meta",{"property":"og:description","content":"jenkins 101"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"cicd"}],["meta",{"property":"article:tag","content":"jenkins"}],["script",{"type":"application/ld+json"},"{\"@context\":\"https://schema.org\",\"@type\":\"Article\",\"headline\":\"2. Jobs\",\"image\":[\"\"],\"dateModified\":null,\"author\":[]}"]]},"headers":[{"level":2,"title":"2.1 New pipeline","slug":"_2-1-new-pipeline","link":"#_2-1-new-pipeline","children":[]},{"level":2,"title":"2.2 New pipeline","slug":"_2-2-new-pipeline","link":"#_2-2-new-pipeline","children":[]},{"level":2,"title":"2.3 Parameterizing a job","slug":"_2-3-parameterizing-a-job","link":"#_2-3-parameterizing-a-job","children":[]},{"level":2,"title":"2.4 Creating multiple steps for a job","slug":"_2-4-creating-multiple-steps-for-a-job","link":"#_2-4-creating-multiple-steps-for-a-job","children":[]},{"level":2,"title":"2.5 Adding scripts as a job step","slug":"_2-5-adding-scripts-as-a-job-step","link":"#_2-5-adding-scripts-as-a-job-step","children":[]}],"git":{},"readingTime":{"minutes":1.83,"words":548},"filePathRelative":"05-Software/Jenkins/pipeline101/02-jobs.md","excerpt":"<h1> 2. Jobs</h1>\n<p>프로젝트는 Job의 일부 입니다. 즉, 모든 프로젝트가 Job이지만 모든 Job이 프로젝트는 아닙니다. Job의 구조는 다음과 같습니다.</p>\n<p>FreeStyleProejct, MatrixProject, ExternalJob만 <code>New job</code>에 표시됩니다.</p>\n<h2> 2.1 New pipeline</h2>\n<p>Step 1에서는 <code>stage</code>없이 기본 Pipeline을 실행하여 수행 테스트를 합니다.</p>\n<ol>\n<li>\n<p>Jenkins 로그인</p>\n</li>\n<li>\n<p>좌측 <code>새로운 Item</code> 클릭</p>\n</li>\n<li>\n<p><code>Enter an item name</code>에 Job 이름 설정 (e.g. 2.Jobs)</p>\n</li>\n<li>\n<p><code>Pipeline</code> 선택 후 <code>OK</code> 버튼 클릭</p>\n</li>\n<li>\n<p><code>Pipeline</code> 항목 오른 쪽 <code>Try sample Pipelie...</code>클릭하여 <code>Hello world</code> 클릭 후 저장</p>\n<div class=\"language-groovy line-numbers-mode\" data-ext=\"groovy\"><pre class=\"language-groovy\"><code>node <span class=\"token punctuation\">{</span>\n   echo <span class=\"token string\">'Hello World'</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n<li>\n<p>좌측 <code>Build now</code>클릭</p>\n</li>\n<li>\n<p>좌측 <code>Build History</code>의 최근 빌드된 항목(e.g. #1) 우측에 마우스를 가져가면 dropdown 버튼이 생깁니다. 해당 버튼을 클릭하여 <code>Console Output</code> 클릭</p>\n</li>\n<li>\n<p>수행된 <code>echo</code> 동작 출력을 확인합니다.</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><pre class=\"language-text\"><code>Started by user GyuSeok.Lee\nRunning in Durability level: MAX_SURVIVABILITY\n[Pipeline] Start of Pipeline\n[Pipeline] node\nRunning on Jenkins in /var/lib/jenkins/workspace/2.Jobs\n[Pipeline] {\n[Pipeline] echo\nHello World\n[Pipeline] }\n[Pipeline] // node\n[Pipeline] End of Pipeline\nFinished: SUCCESS\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n</ol>","copyright":{"license":"CC BY-NC-ND 4.0 Licensed | ⓒ 2021-present docmoa™ contributers all rights reserved."}},{"key":"v-9c410dca","path":"/05-Software/Jenkins/pipeline101/03-builds.html","title":"3. Builds","lang":"ko-KR","frontmatter":{"description":"jenkins 101","tag":["cicd","jenkins"],"head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/05-Software/Jenkins/pipeline101/03-builds.html"}],["meta",{"property":"og:site_name","content":"docmoa"}],["meta",{"property":"og:title","content":"3. Builds"}],["meta",{"property":"og:description","content":"jenkins 101"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"cicd"}],["meta",{"property":"article:tag","content":"jenkins"}],["script",{"type":"application/ld+json"},"{\"@context\":\"https://schema.org\",\"@type\":\"Article\",\"headline\":\"3. Builds\",\"image\":[\"\"],\"dateModified\":null,\"author\":[]}"]]},"headers":[{"level":2,"title":"3.1 Tracking build state","slug":"_3-1-tracking-build-state","link":"#_3-1-tracking-build-state","children":[]},{"level":2,"title":"3.2 Polling SCM for build triggering","slug":"_3-2-polling-scm-for-build-triggering","link":"#_3-2-polling-scm-for-build-triggering","children":[]},{"level":2,"title":"3.3 Connecting Jenkins to GitHub","slug":"_3-3-connecting-jenkins-to-github","link":"#_3-3-connecting-jenkins-to-github","children":[]},{"level":2,"title":"3.4 Webhook build triggering","slug":"_3-4-webhook-build-triggering","link":"#_3-4-webhook-build-triggering","children":[]}],"git":{},"readingTime":{"minutes":1.62,"words":487},"filePathRelative":"05-Software/Jenkins/pipeline101/03-builds.md","excerpt":"<h1> 3. Builds</h1>\n<h2> 3.1 Tracking build state</h2>\n<p>Pipeline이 수행되는 동작을 추적하는 과정을 확인합니다. 이를 이를 위한 Pipeline 타입의 Item을 추가로 생성합니다. (e.g. 03-01.TrackingBuildState)</p>\n<p>Pipeline에 다음과 같이 스크립트를 추가합니다.</p>\n<div class=\"language-groovy line-numbers-mode\" data-ext=\"groovy\"><pre class=\"language-groovy\"><code>pipeline <span class=\"token punctuation\">{</span>\n    agent any\n    stages <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">stage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Deploy'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            steps <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">timeout</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> unit<span class=\"token punctuation\">:</span> <span class=\"token string\">'MINUTES'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    sh <span class=\"token string\">'for n in `seq 1 10`; do echo $n; sleep 1; done'</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token function\">timeout</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> unit<span class=\"token punctuation\">:</span> <span class=\"token string\">'MINUTES'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    sh <span class=\"token string\">'for n in `seq 1 50`; do echo $n; sleep 1; done'</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","copyright":{"license":"CC BY-NC-ND 4.0 Licensed | ⓒ 2021-present docmoa™ contributers all rights reserved."}},{"key":"v-0894d88c","path":"/05-Software/Jenkins/pipeline101/04-agent.html","title":"4. Agents and Distributing Builds","lang":"ko-KR","frontmatter":{"description":"jenkins 101","tag":["cicd","jenkins"],"head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/05-Software/Jenkins/pipeline101/04-agent.html"}],["meta",{"property":"og:site_name","content":"docmoa"}],["meta",{"property":"og:title","content":"4. Agents and Distributing Builds"}],["meta",{"property":"og:description","content":"jenkins 101"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"cicd"}],["meta",{"property":"article:tag","content":"jenkins"}],["script",{"type":"application/ld+json"},"{\"@context\":\"https://schema.org\",\"@type\":\"Article\",\"headline\":\"4. Agents and Distributing Builds\",\"image\":[\"\"],\"dateModified\":null,\"author\":[]}"]]},"headers":[{"level":2,"title":"4.1 Adding an SSH build agent to Jenkins","slug":"_4-1-adding-an-ssh-build-agent-to-jenkins","link":"#_4-1-adding-an-ssh-build-agent-to-jenkins","children":[]},{"level":2,"title":"4.2 Using Docker images for agents","slug":"_4-2-using-docker-images-for-agents","link":"#_4-2-using-docker-images-for-agents","children":[]},{"level":2,"title":"4.3 Configuring specific agents","slug":"_4-3-configuring-specific-agents","link":"#_4-3-configuring-specific-agents","children":[]}],"git":{},"readingTime":{"minutes":2.31,"words":693},"filePathRelative":"05-Software/Jenkins/pipeline101/04-agent.md","excerpt":"<h1> 4. Agents and Distributing Builds</h1>\n<p>빌드를 수행하기 위한 Worker로 다중 Jenkins를 컨트롤 할 수 있습니다. 이때 명령을 수행하는 Jenkins는 <code>Master</code>, 빌드를 수행하는 Jenkins는 <code>Worker</code>로 구분합니다. 여기서는 Worker의 연결을 원격 호스트의 Jenkins를 SSH를 통해 연결하는 방식과 컨테이너로 구성된 Jenkins를 연결하는 과정을 확인 합니다.</p>\n<p>Master-Slave 방식, 또는 Master-Agent 방식으로 표현합니다.</p>","copyright":{"license":"CC BY-NC-ND 4.0 Licensed | ⓒ 2021-present docmoa™ contributers all rights reserved."}},{"key":"v-7d019070","path":"/05-Software/Jenkins/pipeline101/05-plugins.html","title":"5. Plugins","lang":"ko-KR","frontmatter":{"description":"jenkins 101","tag":["cicd","jenkins"],"head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/05-Software/Jenkins/pipeline101/05-plugins.html"}],["meta",{"property":"og:site_name","content":"docmoa"}],["meta",{"property":"og:title","content":"5. Plugins"}],["meta",{"property":"og:description","content":"jenkins 101"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"cicd"}],["meta",{"property":"article:tag","content":"jenkins"}],["script",{"type":"application/ld+json"},"{\"@context\":\"https://schema.org\",\"@type\":\"Article\",\"headline\":\"5. Plugins\",\"image\":[\"\"],\"dateModified\":null,\"author\":[]}"]]},"headers":[{"level":2,"title":"5.1 Adding plugins via plugin manager","slug":"_5-1-adding-plugins-via-plugin-manager","link":"#_5-1-adding-plugins-via-plugin-manager","children":[]},{"level":2,"title":"5.2 Using shared libraries","slug":"_5-2-using-shared-libraries","link":"#_5-2-using-shared-libraries","children":[]}],"git":{},"readingTime":{"minutes":0.65,"words":196},"filePathRelative":"05-Software/Jenkins/pipeline101/05-plugins.md","excerpt":"<h1> 5. Plugins</h1>\n<p>Jenkins가 유용한 툴인 이유중 하나는 방대한 양의 플러그인 입니다. Jenkins의 기능을 확장시키고, 관리, 빌드 정책 등을 확장 시켜주고, 타 서비스와의 연계를 쉽게 가능하도록 합니다.</p>\n<p><a href=\"https://plugins.jenkins.io/\" target=\"_blank\" rel=\"noopener noreferrer\">Plugin Index</a></p>\n<figure><figcaption>1564450122219</figcaption></figure>\n<h2> 5.1 Adding plugins via plugin manager</h2>","copyright":{"license":"CC BY-NC-ND 4.0 Licensed | ⓒ 2021-present docmoa™ contributers all rights reserved."}},{"key":"v-937a5d72","path":"/05-Software/Jenkins/pipeline101/06-notifications.html","title":"6. Notifications","lang":"ko-KR","frontmatter":{"description":"jenkins 101","tag":["cicd","jenkins"],"head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/05-Software/Jenkins/pipeline101/06-notifications.html"}],["meta",{"property":"og:site_name","content":"docmoa"}],["meta",{"property":"og:title","content":"6. Notifications"}],["meta",{"property":"og:description","content":"jenkins 101"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"cicd"}],["meta",{"property":"article:tag","content":"jenkins"}],["script",{"type":"application/ld+json"},"{\"@context\":\"https://schema.org\",\"@type\":\"Article\",\"headline\":\"6. Notifications\",\"image\":[\"\"],\"dateModified\":null,\"author\":[]}"]]},"headers":[{"level":2,"title":"6.1 Notifications of build state","slug":"_6-1-notifications-of-build-state","link":"#_6-1-notifications-of-build-state","children":[]},{"level":2,"title":"6.2 Build state badges for SCM","slug":"_6-2-build-state-badges-for-scm","link":"#_6-2-build-state-badges-for-scm","children":[]}],"git":{},"readingTime":{"minutes":0.62,"words":187},"filePathRelative":"05-Software/Jenkins/pipeline101/06-notifications.md","excerpt":"<h1> 6. Notifications</h1>\n<p>Jenkins빌드의 결과를 받아볼 수 있는 몇가지 방안에 대해 알아봅니다.</p>\n<h2> 6.1 Notifications of build state</h2>\n<p>Jenkins에서는 플러그인이나 외부 툴에 의해 빌드에 대한 결과를 받아 볼 수 있습니다. 대표적으로는 Jenkins의 슬랙 플러그인을 사용하여 슬랙으로 빌드에 결과를 받아보거나, <a href=\"http://catlight.io\" target=\"_blank\" rel=\"noopener noreferrer\">catlight.io</a> 에서 데스크탑용 어플리케이션에 연동하는 방법도 있습니다.</p>","copyright":{"license":"CC BY-NC-ND 4.0 Licensed | ⓒ 2021-present docmoa™ contributers all rights reserved."}},{"key":"v-50a12184","path":"/05-Software/Jenkins/pipeline101/07-testing.html","title":"7. Testing","lang":"ko-KR","frontmatter":{"description":"jenkins 101","tag":["cicd","jenkins"],"head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/05-Software/Jenkins/pipeline101/07-testing.html"}],["meta",{"property":"og:site_name","content":"docmoa"}],["meta",{"property":"og:title","content":"7. Testing"}],["meta",{"property":"og:description","content":"jenkins 101"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"cicd"}],["meta",{"property":"article:tag","content":"jenkins"}],["script",{"type":"application/ld+json"},"{\"@context\":\"https://schema.org\",\"@type\":\"Article\",\"headline\":\"7. Testing\",\"image\":[\"\"],\"dateModified\":null,\"author\":[]}"]]},"headers":[{"level":2,"title":"7.1 Code coverage tests and reports","slug":"_7-1-code-coverage-tests-and-reports","link":"#_7-1-code-coverage-tests-and-reports","children":[]},{"level":2,"title":"7.2 Using test results to stop the build","slug":"_7-2-using-test-results-to-stop-the-build","link":"#_7-2-using-test-results-to-stop-the-build","children":[]}],"git":{},"readingTime":{"minutes":0.68,"words":204},"filePathRelative":"05-Software/Jenkins/pipeline101/07-testing.md","excerpt":"<h1> 7. Testing</h1>\n<h2> 7.1 Code coverage tests and reports</h2>\n<p>테스트 Pipeline 구성시 테스트 과정을 지정할 수 있습니다.  Testing을 위한 <code>Pipeline</code> 타입의 Item을 추가로 생성합니다. (e.g. 07-01.CodeCoverageTestsAndReports)</p>\n<p>설정은 다음과 같이 수행합니다.</p>\n<ol>\n<li>\n<p><code>Pipeline</code> 스크립트에 다음과 같이 입력 합니다. 테스트와 빌드, 검증 후 결과를 보관하는 단계까지 이루어 집니다.</p>\n<div class=\"language-groovy line-numbers-mode\" data-ext=\"groovy\"><pre class=\"language-groovy\"><code>pipeline <span class=\"token punctuation\">{</span>\n    agent any\n    stages <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">stage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Build'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            steps <span class=\"token punctuation\">{</span>\n                sh <span class=\"token string\">'''\n                  echo This &gt; app.sh\n                  echo That &gt;&gt; app.sh\n                '''</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">stage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Test'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            steps <span class=\"token punctuation\">{</span>\n                sh <span class=\"token string\">'''\n                  grep This app.sh &gt;&gt; ${BUILD_ID}.cov\n                  grep That app.sh &gt;&gt; ${BUILD_ID}.cov\n                '''</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">stage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Coverage'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            steps <span class=\"token punctuation\">{</span>\n                sh <span class=\"token string\">'''\n                  app_lines=`cat app.sh | wc -l`\n                  cov_lines=`cat ${BUILD_ID}.cov | wc -l`\n                  echo The app has `expr $app_lines - $cov_lines` lines uncovered &gt; ${BUILD_ID}.rpt\n                  cat ${BUILD_ID}.rpt\n                '''</span>\n                archiveArtifacts <span class=\"token interpolation-string\"><span class=\"token string\">\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token expression\">env<span class=\"token punctuation\">.</span>BUILD_ID</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.rpt\"</span></span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n<li>\n<p>빌드가 완료되면 해당 Job화면을 리로드 합니다. Pipeline에 <code>archiveArtifacts</code>가 추가되었으므로 해당 Job에서 이를 관리합니다.<br>\n</p>\n</li>\n<li>\n<p>해당 아카이브에는 코드 검증 후의 결과가 저장 됩니다.</p>\n</li>\n</ol>","copyright":{"license":"CC BY-NC-ND 4.0 Licensed | ⓒ 2021-present docmoa™ contributers all rights reserved."}},{"key":"v-4f52a232","path":"/05-Software/Jenkins/pipeline101/08-restapi.html","title":"8. REST API","lang":"ko-KR","frontmatter":{"description":"jenkins 101","tag":["cicd","jenkins"],"head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/05-Software/Jenkins/pipeline101/08-restapi.html"}],["meta",{"property":"og:site_name","content":"docmoa"}],["meta",{"property":"og:title","content":"8. REST API"}],["meta",{"property":"og:description","content":"jenkins 101"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"cicd"}],["meta",{"property":"article:tag","content":"jenkins"}],["script",{"type":"application/ld+json"},"{\"@context\":\"https://schema.org\",\"@type\":\"Article\",\"headline\":\"8. REST API\",\"image\":[\"\"],\"dateModified\":null,\"author\":[]}"]]},"headers":[{"level":2,"title":"8.1 Triggering builds via the REST API","slug":"_8-1-triggering-builds-via-the-rest-api","link":"#_8-1-triggering-builds-via-the-rest-api","children":[]},{"level":2,"title":"8.2 Retriving build status via the REST API","slug":"_8-2-retriving-build-status-via-the-rest-api","link":"#_8-2-retriving-build-status-via-the-rest-api","children":[]}],"git":{},"readingTime":{"minutes":0.55,"words":166},"filePathRelative":"05-Software/Jenkins/pipeline101/08-restapi.md","excerpt":"<h1> 8. REST API</h1>\n<p>Jenkins는 외부 서비스와의 연동이나 정보 조회를 위한 API를 제공합니다.</p>\n<h2> 8.1 Triggering builds via the REST API</h2>\n<p>Jenkins REST API 테스트를 위해서는 Jenkins에 인증 가능한 Token을 취득하고 curl이나 Postman 같은 도구를 사용하여 확인 가능 합니다. 우선 Token을 얻는 방법은 다음과 같습니다.</p>\n<ol>\n<li>\n<p>Jenkins에 로그인 합니다.</p>\n</li>\n<li>\n<p>우측 상단의 로그인 아이디에 마우스를 호버하면 드롭박스 버튼이 나타납니다. <code>설정</code>을 클릭합니다.</p>\n</li>\n<li>\n<p><code>API Token</code>에서 <code>Current token</code>을 확인합니다. 등록된 Token이 없는 경우 다음과 같이 신규 Token을 발급 받습니다.</p>\n<ul>\n<li>\n<p><code>ADD NEW TOKEN</code>을 클릭합니다.</p>\n</li>\n<li>\n<p>이름을 기입하는 칸에 로그인 한 아이디를 등록합니다. (e.g. admin)</p>\n</li>\n<li>\n<p><code>GENERATE</code>를 클릭하여 Token을 생성합니다.</p>\n</li>\n</ul>\n</li>\n<li>\n<p>이름과 Token을 사용하여 다음과 같이 curl로 접속하면 <code>Jenkins-Crumb</code> 프롬프트가 나타납니다.</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><pre class=\"language-bash\"><code>$ <span class=\"token function\">curl</span> <span class=\"token parameter variable\">--user</span> <span class=\"token string\">\"admin:TOKEN\"</span> <span class=\"token string\">'http://myjenkins.com/crumbIssuer/api/xml?xpath=concat(//crumbRequestField,\":\",//crumb)'</span>\n\nJenkins-Crumb:89e1fd9c402824c89465f6b97f49b605\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n<li>\n<p><code>Crumb</code>를 확인했으면 다시 헤더 값에 <code>Jenkins-Crumb:</code>를 추가하여 <code>02-04.MultiStep</code> Job을 빌드하기 위해 다음과 같이 요청합니다.</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><pre class=\"language-bash\"><code>$ <span class=\"token function\">curl</span> <span class=\"token parameter variable\">-X</span> POST http://myjenkins.com/job/02-04.MultiStep/build <span class=\"token parameter variable\">--user</span> gyulee:11479bdec9cada082d189938a3946348be --data-urlencode <span class=\"token assign-left variable\">json</span><span class=\"token operator\">=</span><span class=\"token string\">''</span> <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Jenkins-Crumb:89e1fd9c402824c89465f6b97f49b605\"</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div></li>\n</ol>","copyright":{"license":"CC BY-NC-ND 4.0 Licensed | ⓒ 2021-present docmoa™ contributers all rights reserved."}}]