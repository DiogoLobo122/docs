export const data = JSON.parse("{\"key\":\"v-50a12184\",\"path\":\"/05-Software/Jenkins/pipeline101/07-testing.html\",\"title\":\"7. Testing\",\"lang\":\"ko-KR\",\"frontmatter\":{\"description\":\"jenkins 101\",\"tag\":[\"cicd\",\"jenkins\"],\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://vuepress-theme-hope-docs-demo.netlify.app/05-Software/Jenkins/pipeline101/07-testing.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"docmoa\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"7. Testing\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"jenkins 101\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"ko-KR\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"cicd\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"jenkins\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"7. Testing\\\",\\\"image\\\":[\\\"\\\"],\\\"dateModified\\\":null,\\\"author\\\":[]}\"]]},\"headers\":[{\"level\":2,\"title\":\"7.1 Code coverage tests and reports\",\"slug\":\"_7-1-code-coverage-tests-and-reports\",\"link\":\"#_7-1-code-coverage-tests-and-reports\",\"children\":[]},{\"level\":2,\"title\":\"7.2 Using test results to stop the build\",\"slug\":\"_7-2-using-test-results-to-stop-the-build\",\"link\":\"#_7-2-using-test-results-to-stop-the-build\",\"children\":[]}],\"git\":{},\"readingTime\":{\"minutes\":0.68,\"words\":204},\"filePathRelative\":\"05-Software/Jenkins/pipeline101/07-testing.md\",\"excerpt\":\"<h1> 7. Testing</h1>\\n<h2> 7.1 Code coverage tests and reports</h2>\\n<p>테스트 Pipeline 구성시 테스트 과정을 지정할 수 있습니다.  Testing을 위한 <code>Pipeline</code> 타입의 Item을 추가로 생성합니다. (e.g. 07-01.CodeCoverageTestsAndReports)</p>\\n<p>설정은 다음과 같이 수행합니다.</p>\\n<ol>\\n<li>\\n<p><code>Pipeline</code> 스크립트에 다음과 같이 입력 합니다. 테스트와 빌드, 검증 후 결과를 보관하는 단계까지 이루어 집니다.</p>\\n<div class=\\\"language-groovy line-numbers-mode\\\" data-ext=\\\"groovy\\\"><pre class=\\\"language-groovy\\\"><code>pipeline <span class=\\\"token punctuation\\\">{</span>\\n    agent any\\n    stages <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">stage</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Build'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            steps <span class=\\\"token punctuation\\\">{</span>\\n                sh <span class=\\\"token string\\\">'''\\n                  echo This &gt; app.sh\\n                  echo That &gt;&gt; app.sh\\n                '''</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token function\\\">stage</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Test'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            steps <span class=\\\"token punctuation\\\">{</span>\\n                sh <span class=\\\"token string\\\">'''\\n                  grep This app.sh &gt;&gt; ${BUILD_ID}.cov\\n                  grep That app.sh &gt;&gt; ${BUILD_ID}.cov\\n                '''</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token function\\\">stage</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Coverage'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n            steps <span class=\\\"token punctuation\\\">{</span>\\n                sh <span class=\\\"token string\\\">'''\\n                  app_lines=`cat app.sh | wc -l`\\n                  cov_lines=`cat ${BUILD_ID}.cov | wc -l`\\n                  echo The app has `expr $app_lines - $cov_lines` lines uncovered &gt; ${BUILD_ID}.rpt\\n                  cat ${BUILD_ID}.rpt\\n                '''</span>\\n                archiveArtifacts <span class=\\\"token interpolation-string\\\"><span class=\\\"token string\\\">\\\"</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span><span class=\\\"token expression\\\">env<span class=\\\"token punctuation\\\">.</span>BUILD_ID</span><span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">.rpt\\\"</span></span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre><div class=\\\"line-numbers\\\" aria-hidden=\\\"true\\\"><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div></div></div></li>\\n<li>\\n<p>빌드가 완료되면 해당 Job화면을 리로드 합니다. Pipeline에 <code>archiveArtifacts</code>가 추가되었으므로 해당 Job에서 이를 관리합니다.<br>\\n</p>\\n</li>\\n<li>\\n<p>해당 아카이브에는 코드 검증 후의 결과가 저장 됩니다.</p>\\n</li>\\n</ol>\",\"copyright\":{\"license\":\"CC BY-NC-ND 4.0 Licensed | ⓒ 2021-present docmoa™ contributers all rights reserved.\"}}")

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
